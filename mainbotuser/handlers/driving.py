from aiogram import Bot, flags, F
from aiogram.types import Message, CallbackQuery
from graphql.m_types import DrivingStatus
from graphql.mutations import run_taxi_cancel_application, run_taxi_set_my_location, run_taxi_set_status
from graphql.queres import run_get_my_taxi_status
from loaders import main_bot_router
from aiogram.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _, lazy_gettext as __
from aiogram.utils.chat_action import ChatActionSender
from aiogram.filters.state import StateFilter
from mainbotuser.callback_datas import ApplicationCallbackData
from mainbotuser.keyboards.inline import fill_taxi_info
from mainbotuser.keyboards.reply_kb import cancel, main_panel
from mainbotuser.shortcuts import add_life_location, delete_life_location_by_user_id, get_life_location, get_user
from mainbotuser.states import TaxiState

@main_bot_router.message(F.text == __("‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"))
@flags.rate_limit(key="on_select_stop_work")
async def on_start(message: Message, state: FSMContext, bot: Bot):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        await run_taxi_set_status(message.from_user.id, DrivingStatus.REST)
        await delete_life_location_by_user_id(message.message_id)
        await message.answer(_("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –≤–æ–¥–∏—Ç—å'"), reply_markup=await main_panel(message.from_user.id))        
        
@main_bot_router.message(F.text == __("üöñ –ù–∞—á–∞—Ç—å –≤–æ–¥–∏—Ç—å"))
@flags.rate_limit(key="on_select_find_taxi")
async def on_start(message: Message, state: FSMContext, bot: Bot):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        status = await run_get_my_taxi_status(message.from_user.id)
        match status:
            case None:
                await message.answer(_("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ø–µ—Ä–≤–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ"), reply_markup=fill_taxi_info())
                return 
            case 'REST':
                await message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ live-–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"), reply_markup=cancel())
                await state.set_state(TaxiState.set_my_live_location)
                return
            case _:
                await message.answer(_("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É'"), reply_markup=await main_panel(message.from_user.id))
                return

            
            
@main_bot_router.message(StateFilter(TaxiState.set_my_live_location))
@flags.rate_limit(key="on_select_set_location")
async def on_start(message: Message, state: FSMContext, bot: Bot):
    if message.text == _("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
        await state.clear()
        await message.answer(_("–û—Ç–º–µ–Ω–µ–Ω–æ"), reply_markup=await main_panel(message.from_user.id))
        return
    if message.location:
        if not message.location.live_period:
            await message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ live-–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"), reply_markup=cancel())
            return
        try:
            await run_taxi_set_my_location(message.from_user.id, message.location.latitude, message.location.longitude, DrivingStatus.WAIT)
            await add_life_location(message.message_id, message.from_user.id)
            await message.answer(_("–í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∂–∏–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"), reply_markup=await main_panel(message.from_user.id))
            await state.clear()
        except Exception as e:
            await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {error}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ").format(error=f'{e}'), reply_markup=await main_panel(message.from_user.id))

@main_bot_router.edited_message()
async def on_start(message: Message, state: FSMContext, bot: Bot):
    bot.send_location
    instance = await get_life_location(message.message_id)
    if not instance:
        return
    if message.location:
        if not message.location.live_period:
            await instance.delete()
            await run_taxi_set_status(message.from_user.id, DrivingStatus.REST)
            return
        await run_taxi_set_my_location(message.from_user.id, message.location.latitude, message.location.longitude, DrivingStatus.WAIT)

